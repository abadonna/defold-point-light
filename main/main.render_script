render.FORMAT_RGB16F = 22
render.FORMAT_RGB32F = 23
render.FORMAT_RGBA16F = 24
render.FORMAT_RGBA32F = 25
render.FORMAT_R16F = 26
render.FORMAT_RG16F = 27
render.FORMAT_R32F = 28
render.FORMAT_RG32F = 29

--
-- projection that centers content with maintained aspect ratio and optional zoom
--
local function fixed_projection(near, far, zoom)
    local projected_width = render.get_window_width() / (zoom or 1)
    local projected_height = render.get_window_height() / (zoom or 1)
    local xoffset = -(projected_width - render.get_width()) / 2
    local yoffset = -(projected_height - render.get_height()) / 2
    return vmath.matrix4_orthographic(xoffset, xoffset + projected_width, yoffset, yoffset + projected_height, near, far)
end
--
-- projection that centers and fits content with maintained aspect ratio
--
local function fixed_fit_projection(near, far)
    local width = render.get_width()
    local height = render.get_height()
    local window_width = render.get_window_width()
    local window_height = render.get_window_height()
    local zoom = math.min(window_width / width, window_height / height)
    return fixed_projection(near, far, zoom)
end
--
-- projection that stretches content
--
local function stretch_projection(near, far)
    return vmath.matrix4_orthographic(0, render.get_width(), 0, render.get_height(), near, far)
end

local function get_projection(self)
    return self.projection_fn(self.near, self.far, self.zoom)
end


local function create_rt(w, h)
    local color_params = {
        format     = render.FORMAT_R16F, -- for simplicity, for compatibility use FORMAT_RGBA
        width      = w,
        height     = h,
        min_filter = render.FILTER_NEAREST,
        mag_filter = render.FILTER_NEAREST,
        u_wrap     = render.WRAP_CLAMP_TO_EDGE,
        v_wrap     = render.WRAP_CLAMP_TO_EDGE }

    local depth_params = { 
        format        = render.FORMAT_DEPTH,
        width         = w,
        height        = h,
        min_filter    = render.FILTER_NEAREST,
        mag_filter    = render.FILTER_NEAREST,
        u_wrap        = render.WRAP_CLAMP_TO_EDGE,
        v_wrap        = render.WRAP_CLAMP_TO_EDGE }
        
   return render.render_target("buffer", {[render.BUFFER_COLOR_BIT] = color_params, [render.BUFFER_DEPTH_BIT] = depth_params })
end

function init(self)
    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.particle_pred = render.predicate({"particle"})
    self.model_pred = render.predicate({"model"})
    self.quad_pred = render.predicate({"quad"})
    
    self.clear_color = vmath.vector4(0, 0, 0, 0)
    self.clear_color.x = sys.get_config("render.clear_color_red", 0)
    self.clear_color.y = sys.get_config("render.clear_color_green", 0)
    self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
    self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

    self.view = vmath.matrix4()

    self.shadow_target  = create_rt(2048, 2048, render.FILTER_NEAREST, true)

    self.w = render.get_window_width()
    self.h = render.get_window_height()
  
    
    self.near = 0.1
    self.far = 100
    self.projection_fn = stretch_projection

    self.cb = render.constant_buffer()
    self.light_transform = vmath.matrix4()
    self.light_projection = vmath.matrix4()

    self.bias_matrix    = vmath.matrix4()
    self.bias_matrix.c0 = vmath.vector4(0.5, 0.0, 0.0, 0.0)
    self.bias_matrix.c1 = vmath.vector4(0.0, 0.5, 0.0, 0.0)
    self.bias_matrix.c2 = vmath.vector4(0.0, 0.0, 0.5, 0.0)
    self.bias_matrix.c3 = vmath.vector4(0.5, 0.5, 0.5, 1.0)

    self.light_pos = vmath.vector3(0)
    self.light_projection = vmath.matrix4_perspective(1.5708, 1, 0.1, 100)
end

function render_shadows(self)
    local w = 512
    local h = 512

    render.set_projection(self.light_projection)

    render.set_depth_mask(true)
    render.set_depth_func(render.COMPARE_FUNC_LEQUAL)
    render.enable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_BLEND)
    render.disable_state(render.STATE_CULL_FACE)

    render.set_render_target(self.shadow_target, { transient = {render.BUFFER_DEPTH_BIT} })
    render.clear({[render.BUFFER_COLOR_BIT] = vmath.vector4(0,0,0,1), [render.BUFFER_DEPTH_BIT] = 1})

    render.enable_material("depth")

    --- front
    local light_transform = vmath.matrix4_look_at(self.light_pos, self.light_pos + vmath.vector3(0, 0, -1), vmath.vector3(0, -1,0))   
    render.set_view(light_transform)
    render.set_viewport(0, 0, w, h)
    render.draw(self.model_pred, self.cb)

    --- back
    light_transform = vmath.matrix4_look_at(self.light_pos, self.light_pos + vmath.vector3(0, 0, 1), vmath.vector3(0, -1, 0))
    render.set_view(light_transform)
    render.set_viewport(w, 0, w, h)
    render.draw(self.model_pred, self.cb)


    --- left
    light_transform = vmath.matrix4_look_at(self.light_pos, self.light_pos + vmath.vector3(-1, 0, 0), vmath.vector3(0, -1, 0))
    render.set_view(light_transform)
    render.set_viewport(2 * w, 0, w, h)
    render.draw(self.model_pred, self.cb)


    --- right
    light_transform = vmath.matrix4_look_at(self.light_pos, self.light_pos + vmath.vector3(1, 0, 0), vmath.vector3(0, -1, 0))
    render.set_view(light_transform)
    render.set_viewport(3 * w, 0, w, h)
    render.draw(self.model_pred, self.cb)


    --- up
    light_transform = vmath.matrix4_look_at(self.light_pos, self.light_pos + vmath.vector3(0, 1, 0), vmath.vector3(0, 0, 1))
    render.set_view(light_transform)
    render.set_viewport(0, h, w, h)
    render.draw(self.model_pred, self.cb)


    --- down
    light_transform = vmath.matrix4_look_at(self.light_pos, self.light_pos + vmath.vector3(0, -1, 0), vmath.vector3(0, 0, -1))
    render.set_view(light_transform)
    render.set_viewport(w, h, w, h)
    render.draw(self.model_pred, self.cb)
    
    render.disable_material()

    render.set_render_target(render.RENDER_TARGET_DEFAULT)
end

function update(self)
    self.cb.light = vmath.vector4(self.light_pos.x, self.light_pos.y, self.light_pos.z, 0)
    
    render_shadows(self)
    
    render.set_depth_mask(true)
    render.set_stencil_mask(0xff)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

    render.set_viewport(0, 0, self.w, self.h)
    render.set_view(self.view)

    render.set_depth_mask(false)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_STENCIL_TEST)
    render.enable_state(render.STATE_BLEND)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.disable_state(render.STATE_CULL_FACE)

    render.set_projection(get_projection(self))

    render.draw(self.tile_pred)
    render.draw(self.particle_pred)
    render.draw_debug3d()

    -- render models
    --
   
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.enable_state(render.STATE_CULL_FACE)
    render.enable_state(render.STATE_DEPTH_TEST)
    render.set_depth_mask(true)

    render.enable_texture(1, self.shadow_target, render.BUFFER_COLOR_BIT)
    render.draw(self.model_pred, self.cb)
    render.disable_texture(1)
    
   
    -- debug rendering

    --render.enable_texture(0, self.shadow_target, render.BUFFER_COLOR_BIT)
    --render.draw(self.quad_pred)
    --render.disable_texture(0)



    ---
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_CULL_FACE)    
    render.draw_debug3d()
    
    -- render GUI
    --
    render.set_view(vmath.matrix4())
    render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))

    render.enable_state(render.STATE_STENCIL_TEST)
    render.draw(self.gui_pred)
    render.draw(self.text_pred)
    render.disable_state(render.STATE_STENCIL_TEST)
end

function on_message(self, message_id, message)
    if message_id == hash("clear_color") then
        self.clear_color = message.color
    elseif message_id == hash("set_view_projection") then
        self.view = message.view
        self.projection = message.projection
    elseif message_id == hash("use_camera_projection") then
        self.projection_fn = function() return self.projection or vmath.matrix4() end
    elseif message_id == hash("use_stretch_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.projection_fn = stretch_projection
    elseif message_id == hash("use_fixed_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.zoom = message.zoom or 1
        self.projection_fn = fixed_projection
    elseif message_id == hash("use_fixed_fit_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.projection_fn = fixed_fit_projection
    elseif message_id == hash("set_light_position") then
        pprint(message.pos)
        self.light_pos = message.pos
    end
end
